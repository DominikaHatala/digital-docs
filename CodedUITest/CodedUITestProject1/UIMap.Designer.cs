// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 15.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace CodedUITestProject1
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// LoginFail - Use 'LoginFailParams' to pass parameters into this method.
        /// </summary>
        public void LoginFail()
        {
            #region Variable Declarations
            WinEdit uINameEdit = this.UIDebugWindow.UIItemWindow.UIDigital_docs_wpfListItem.UINameEdit;
            WpfEdit uILoginBoxEdit = this.UILoginViewWindow.UILoginBoxEdit;
            WpfEdit uIPasswordBoxEdit = this.UILoginViewWindow.UIPasswordBoxEdit;
            WpfButton uISigninButton = this.UILoginViewWindow.UISigninButton;
            WinButton uIOKButton = this.UIOKWindow.UIOKButton;
            WinButton uICloseButton = this.UILoginViewWindow1.UICloseButton;
            #endregion

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit, new Point(78, 6));

            // Type 'test' in 'LoginBox' text box
            uILoginBoxEdit.Text = this.LoginFailParams.UILoginBoxEditText;

            // Type '{Tab}' in 'LoginBox' text box
            Keyboard.SendKeys(uILoginBoxEdit, this.LoginFailParams.UILoginBoxEditSendKeys, ModifierKeys.None);

            // Type '********' in 'PasswordBox' text box
            Keyboard.SendKeys(uIPasswordBoxEdit, this.LoginFailParams.UIPasswordBoxEditSendKeys, true);

            // Click 'Sign in' button
            Mouse.Click(uISigninButton, new Point(17, 20));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(45, 10));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(41, 9));
        }
        
        /// <summary>
        /// RecordedMethod1 - Use 'RecordedMethod1Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod1()
        {
            #region Variable Declarations
            WinEdit uINameEdit = this.UIDebugWindow.UIItemWindow.UIDigital_docs_wpfListItem.UINameEdit;
            WpfEdit uILoginBoxEdit = this.UILoginViewWindow.UILoginBoxEdit;
            WpfEdit uIPasswordBoxEdit = this.UILoginViewWindow.UIPasswordBoxEdit;
            WpfButton uISigninButton = this.UILoginViewWindow.UISigninButton;
            WinButton uIOKButton = this.UIOKWindow.UIOKButton;
            WinButton uICloseButton = this.UILoginViewWindow1.UICloseButton;
            #endregion

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit, new Point(106, 8));

            // Type 'test1' in 'LoginBox' text box
            uILoginBoxEdit.Text = this.RecordedMethod1Params.UILoginBoxEditText;

            // Type '{Tab}' in 'LoginBox' text box
            Keyboard.SendKeys(uILoginBoxEdit, this.RecordedMethod1Params.UILoginBoxEditSendKeys, ModifierKeys.None);

            // Type '********' in 'PasswordBox' text box
            Keyboard.SendKeys(uIPasswordBoxEdit, this.RecordedMethod1Params.UIPasswordBoxEditSendKeys, true);

            // Click 'Sign in' button
            Mouse.Click(uISigninButton, new Point(25, 7));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(92, 7));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(29, 16));
        }
        
        /// <summary>
        /// RecordedMethod2 - Use 'RecordedMethod2Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod2()
        {
            #region Variable Declarations
            WinEdit uINameEdit = this.UIDebugWindow.UIItemWindow.UIDigital_docs_wpfListItem.UINameEdit;
            WpfEdit uILoginBoxEdit = this.UILoginViewWindow.UILoginBoxEdit;
            WpfEdit uIPasswordBoxEdit = this.UILoginViewWindow.UIPasswordBoxEdit;
            WpfButton uISigninButton = this.UILoginViewWindow.UISigninButton;
            WpfButton uIBacktologinButton = this.UIUser1_NewTasksWindow.UIBacktologinButton;
            WinButton uICloseButton = this.UILoginViewWindow1.UICloseButton;
            #endregion

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit, new Point(82, 23));

            // Type 'user1' in 'LoginBox' text box
            uILoginBoxEdit.Text = this.RecordedMethod2Params.UILoginBoxEditText;

            // Type '{Tab}' in 'LoginBox' text box
            Keyboard.SendKeys(uILoginBoxEdit, this.RecordedMethod2Params.UILoginBoxEditSendKeys, ModifierKeys.None);

            // Type '********' in 'PasswordBox' text box
            Keyboard.SendKeys(uIPasswordBoxEdit, this.RecordedMethod2Params.UIPasswordBoxEditSendKeys, true);

            // Click 'Sign in' button
            Mouse.Click(uISigninButton, new Point(35, 8));

            // Click 'Back to login' button
            Mouse.Click(uIBacktologinButton, new Point(59, 51));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(38, 23));
        }
        
        /// <summary>
        /// FetchUser1 - Use 'FetchUser1Params' to pass parameters into this method.
        /// </summary>
        public void FetchUser1()
        {
            #region Variable Declarations
            WinTitleBar uIDebugTitleBar = this.UIDebugWindow.UIDebugTitleBar;
            WinEdit uINameEdit = this.UIDebugWindow.UIItemWindow.UIDigital_docs_wpfListItem.UINameEdit;
            WpfEdit uILoginBoxEdit = this.UILoginViewWindow.UILoginBoxEdit;
            WpfEdit uIPasswordBoxEdit = this.UILoginViewWindow.UIPasswordBoxEdit;
            WpfButton uISigninButton = this.UILoginViewWindow.UISigninButton;
            WpfButton uIFetchoffersButton = this.UIUser1_NewTasksWindow.UIFetchoffersButton;
            WinButton uICloseButton = this.UIUser1_NewTasksWindow1.UICloseButton;
            #endregion

            // Click 'Debug' title bar
            Mouse.Click(uIDebugTitleBar, new Point(435, 17));

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit, new Point(100, 12));

            // Type 'user1' in 'LoginBox' text box
            uILoginBoxEdit.Text = this.FetchUser1Params.UILoginBoxEditText;

            // Type '{Tab}' in 'LoginBox' text box
            Keyboard.SendKeys(uILoginBoxEdit, this.FetchUser1Params.UILoginBoxEditSendKeys, ModifierKeys.None);

            // Type '********' in 'PasswordBox' text box
            Keyboard.SendKeys(uIPasswordBoxEdit, this.FetchUser1Params.UIPasswordBoxEditSendKeys, true);

            // Click 'Sign in' button
            Mouse.Click(uISigninButton, new Point(30, 25));

            // Click 'Fetch offers' button
            Mouse.Click(uIFetchoffersButton, new Point(73, 40));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(37, 29));
        }
        
        /// <summary>
        /// FetchUser2 - Use 'FetchUser2Params' to pass parameters into this method.
        /// </summary>
        public void FetchUser2()
        {
            #region Variable Declarations
            WinEdit uINameEdit = this.UIDebugWindow.UIItemWindow.UIDigital_docs_wpfListItem.UINameEdit;
            WpfEdit uILoginBoxEdit = this.UILoginViewWindow.UILoginBoxEdit;
            WpfEdit uIPasswordBoxEdit = this.UILoginViewWindow.UIPasswordBoxEdit;
            WpfButton uISigninButton = this.UILoginViewWindow.UISigninButton;
            WpfButton uIFetchoffersButton = this.UIUser234_InProgressWindow.UIFetchoffersButton;
            WinButton uICloseButton = this.UIUser234_InProgressWindow1.UICloseButton;
            #endregion

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit, new Point(52, 17));

            // Type 'user2' in 'LoginBox' text box
            uILoginBoxEdit.Text = this.FetchUser2Params.UILoginBoxEditText;

            // Type '{Tab}' in 'LoginBox' text box
            Keyboard.SendKeys(uILoginBoxEdit, this.FetchUser2Params.UILoginBoxEditSendKeys, ModifierKeys.None);

            // Type '********' in 'PasswordBox' text box
            Keyboard.SendKeys(uIPasswordBoxEdit, this.FetchUser2Params.UIPasswordBoxEditSendKeys, true);

            // Click 'Sign in' button
            Mouse.Click(uISigninButton, new Point(51, 29));

            // Click 'Fetch offers' button
            Mouse.Click(uIFetchoffersButton, new Point(36, 9));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(49, 18));
        }
        
        /// <summary>
        /// SendMail2 - Use 'SendMail2Params' to pass parameters into this method.
        /// </summary>
        public void SendMail2()
        {
            #region Variable Declarations
            WinTitleBar uIDebugTitleBar = this.UIDebugWindow.UIDebugTitleBar;
            WinEdit uINameEdit = this.UIDebugWindow.UIItemWindow.UIDigital_docs_wpfListItem.UINameEdit;
            WpfEdit uILoginBoxEdit = this.UILoginViewWindow.UILoginBoxEdit;
            WpfEdit uIPasswordBoxEdit = this.UILoginViewWindow.UIPasswordBoxEdit;
            WpfButton uISigninButton = this.UILoginViewWindow.UISigninButton;
            WpfButton uIFetchoffersButton = this.UIUser1_NewTasksWindow.UIFetchoffersButton;
            WpfCell uIMailSubject8832Cell = this.UIUser1_NewTasksWindow.UIListViewTable.UIItemDataItem.UIMailSubject8832Cell;
            WpfCheckBox uIEmployee2CheckBox = this.UIUser1_NewTasksWindow.UIEmployee2CheckBox;
            WpfButton uIAcceptButton = this.UIUser1_NewTasksWindow.UIAcceptButton;
            WinButton uIOKButton = this.UIOKWindow.UIOKButton;
            WpfEdit uIProductListTextBoxEdit = this.UIExcelDialogWindow.UIProductListTextBoxEdit;
            WpfButton uIOKButton1 = this.UIExcelDialogWindow.UIOKButton;
            WinButton uICloseButton = this.UIUser1_NewTasksWindow1.UICloseButton;
            #endregion

            // Click 'Debug' title bar
            Mouse.Click(uIDebugTitleBar, new Point(545, 18));

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit, new Point(73, 20));

            // Type 'user1' in 'LoginBox' text box
            uILoginBoxEdit.Text = this.SendMail2Params.UILoginBoxEditText;

            // Type '{Tab}' in 'LoginBox' text box
            Keyboard.SendKeys(uILoginBoxEdit, this.SendMail2Params.UILoginBoxEditSendKeys, ModifierKeys.None);

            // Type '********' in 'PasswordBox' text box
            Keyboard.SendKeys(uIPasswordBoxEdit, this.SendMail2Params.UIPasswordBoxEditSendKeys, true);

            // Click 'Sign in' button
            Mouse.Click(uISigninButton, new Point(12, 34));

            // Click 'Fetch offers' button
            Mouse.Click(uIFetchoffersButton, new Point(102, 43));

            // Click 'mailSubject8832' cell
            Mouse.Click(uIMailSubject8832Cell, new Point(64, 10));

            // Select 'Employee #2' check box
            uIEmployee2CheckBox.Checked = this.SendMail2Params.UIEmployee2CheckBoxChecked;

            // Click 'Accept' button
            Mouse.Click(uIAcceptButton, new Point(63, 54));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(44, 6));

            // Type '1,2' in 'productListTextBox' text box
            uIProductListTextBoxEdit.Text = this.SendMail2Params.UIProductListTextBoxEditText;

            // Click 'OK' button
            Mouse.Click(uIOKButton1, new Point(88, 15));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(21, 19));
        }
        
        #region Properties
        public virtual LoginFailParams LoginFailParams
        {
            get
            {
                if ((this.mLoginFailParams == null))
                {
                    this.mLoginFailParams = new LoginFailParams();
                }
                return this.mLoginFailParams;
            }
        }
        
        public virtual RecordedMethod1Params RecordedMethod1Params
        {
            get
            {
                if ((this.mRecordedMethod1Params == null))
                {
                    this.mRecordedMethod1Params = new RecordedMethod1Params();
                }
                return this.mRecordedMethod1Params;
            }
        }
        
        public virtual RecordedMethod2Params RecordedMethod2Params
        {
            get
            {
                if ((this.mRecordedMethod2Params == null))
                {
                    this.mRecordedMethod2Params = new RecordedMethod2Params();
                }
                return this.mRecordedMethod2Params;
            }
        }
        
        public virtual FetchUser1Params FetchUser1Params
        {
            get
            {
                if ((this.mFetchUser1Params == null))
                {
                    this.mFetchUser1Params = new FetchUser1Params();
                }
                return this.mFetchUser1Params;
            }
        }
        
        public virtual FetchUser2Params FetchUser2Params
        {
            get
            {
                if ((this.mFetchUser2Params == null))
                {
                    this.mFetchUser2Params = new FetchUser2Params();
                }
                return this.mFetchUser2Params;
            }
        }
        
        public virtual SendMail2Params SendMail2Params
        {
            get
            {
                if ((this.mSendMail2Params == null))
                {
                    this.mSendMail2Params = new SendMail2Params();
                }
                return this.mSendMail2Params;
            }
        }
        
        public UILoginViewWindow UILoginViewWindow
        {
            get
            {
                if ((this.mUILoginViewWindow == null))
                {
                    this.mUILoginViewWindow = new UILoginViewWindow();
                }
                return this.mUILoginViewWindow;
            }
        }
        
        public UIOKWindow UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow();
                }
                return this.mUIOKWindow;
            }
        }
        
        public UILoginViewWindow1 UILoginViewWindow1
        {
            get
            {
                if ((this.mUILoginViewWindow1 == null))
                {
                    this.mUILoginViewWindow1 = new UILoginViewWindow1();
                }
                return this.mUILoginViewWindow1;
            }
        }
        
        public UIDebugWindow UIDebugWindow
        {
            get
            {
                if ((this.mUIDebugWindow == null))
                {
                    this.mUIDebugWindow = new UIDebugWindow();
                }
                return this.mUIDebugWindow;
            }
        }
        
        public UIUser1_NewTasksWindow UIUser1_NewTasksWindow
        {
            get
            {
                if ((this.mUIUser1_NewTasksWindow == null))
                {
                    this.mUIUser1_NewTasksWindow = new UIUser1_NewTasksWindow();
                }
                return this.mUIUser1_NewTasksWindow;
            }
        }
        
        public UIUser234_InProgressWindow UIUser234_InProgressWindow
        {
            get
            {
                if ((this.mUIUser234_InProgressWindow == null))
                {
                    this.mUIUser234_InProgressWindow = new UIUser234_InProgressWindow();
                }
                return this.mUIUser234_InProgressWindow;
            }
        }
        
        public UIUser234_InProgressWindow1 UIUser234_InProgressWindow1
        {
            get
            {
                if ((this.mUIUser234_InProgressWindow1 == null))
                {
                    this.mUIUser234_InProgressWindow1 = new UIUser234_InProgressWindow1();
                }
                return this.mUIUser234_InProgressWindow1;
            }
        }
        
        public UIUser1_NewTasksWindow1 UIUser1_NewTasksWindow1
        {
            get
            {
                if ((this.mUIUser1_NewTasksWindow1 == null))
                {
                    this.mUIUser1_NewTasksWindow1 = new UIUser1_NewTasksWindow1();
                }
                return this.mUIUser1_NewTasksWindow1;
            }
        }
        
        public UIExcelDialogWindow UIExcelDialogWindow
        {
            get
            {
                if ((this.mUIExcelDialogWindow == null))
                {
                    this.mUIExcelDialogWindow = new UIExcelDialogWindow();
                }
                return this.mUIExcelDialogWindow;
            }
        }
        #endregion
        
        #region Fields
        private LoginFailParams mLoginFailParams;
        
        private RecordedMethod1Params mRecordedMethod1Params;
        
        private RecordedMethod2Params mRecordedMethod2Params;
        
        private FetchUser1Params mFetchUser1Params;
        
        private FetchUser2Params mFetchUser2Params;
        
        private SendMail2Params mSendMail2Params;
        
        private UILoginViewWindow mUILoginViewWindow;
        
        private UIOKWindow mUIOKWindow;
        
        private UILoginViewWindow1 mUILoginViewWindow1;
        
        private UIDebugWindow mUIDebugWindow;
        
        private UIUser1_NewTasksWindow mUIUser1_NewTasksWindow;
        
        private UIUser234_InProgressWindow mUIUser234_InProgressWindow;
        
        private UIUser234_InProgressWindow1 mUIUser234_InProgressWindow1;
        
        private UIUser1_NewTasksWindow1 mUIUser1_NewTasksWindow1;
        
        private UIExcelDialogWindow mUIExcelDialogWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'LoginFail'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class LoginFailParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'test' in 'LoginBox' text box
        /// </summary>
        public string UILoginBoxEditText = "test";
        
        /// <summary>
        /// Type '{Tab}' in 'LoginBox' text box
        /// </summary>
        public string UILoginBoxEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '********' in 'PasswordBox' text box
        /// </summary>
        public string UIPasswordBoxEditSendKeys = "SfMI6drZbBj+8lDOXCOeg7RGHg/RDmWT";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class RecordedMethod1Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'test1' in 'LoginBox' text box
        /// </summary>
        public string UILoginBoxEditText = "test1";
        
        /// <summary>
        /// Type '{Tab}' in 'LoginBox' text box
        /// </summary>
        public string UILoginBoxEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '********' in 'PasswordBox' text box
        /// </summary>
        public string UIPasswordBoxEditSendKeys = "/a6qDNz/Fgn7touRgdEcIj9iBEqZXKfJ";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class RecordedMethod2Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'user1' in 'LoginBox' text box
        /// </summary>
        public string UILoginBoxEditText = "user1";
        
        /// <summary>
        /// Type '{Tab}' in 'LoginBox' text box
        /// </summary>
        public string UILoginBoxEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '********' in 'PasswordBox' text box
        /// </summary>
        public string UIPasswordBoxEditSendKeys = "q1xjnB5rcBXE8ZGHVYqyegs3Aq5qgHdU";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'FetchUser1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class FetchUser1Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'user1' in 'LoginBox' text box
        /// </summary>
        public string UILoginBoxEditText = "user1";
        
        /// <summary>
        /// Type '{Tab}' in 'LoginBox' text box
        /// </summary>
        public string UILoginBoxEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '********' in 'PasswordBox' text box
        /// </summary>
        public string UIPasswordBoxEditSendKeys = "q1xjnB5rcBXE8ZGHVYqyegs3Aq5qgHdU";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'FetchUser2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class FetchUser2Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'user2' in 'LoginBox' text box
        /// </summary>
        public string UILoginBoxEditText = "user2";
        
        /// <summary>
        /// Type '{Tab}' in 'LoginBox' text box
        /// </summary>
        public string UILoginBoxEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '********' in 'PasswordBox' text box
        /// </summary>
        public string UIPasswordBoxEditSendKeys = "Y0pSN38hxPaS+nUJ8XGZSlEeKAapSWC4";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SendMail2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class SendMail2Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'user1' in 'LoginBox' text box
        /// </summary>
        public string UILoginBoxEditText = "user1";
        
        /// <summary>
        /// Type '{Tab}' in 'LoginBox' text box
        /// </summary>
        public string UILoginBoxEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '********' in 'PasswordBox' text box
        /// </summary>
        public string UIPasswordBoxEditSendKeys = "q1xjnB5rcBXE8ZGHVYqyegs3Aq5qgHdU";
        
        /// <summary>
        /// Select 'Employee #2' check box
        /// </summary>
        public bool UIEmployee2CheckBoxChecked = true;
        
        /// <summary>
        /// Type '1,2' in 'productListTextBox' text box
        /// </summary>
        public string UIProductListTextBoxEditText = "1,2";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILoginViewWindow : WpfWindow
    {
        
        public UILoginViewWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "LoginView";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("LoginView");
            #endregion
        }
        
        #region Properties
        public WpfEdit UILoginBoxEdit
        {
            get
            {
                if ((this.mUILoginBoxEdit == null))
                {
                    this.mUILoginBoxEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUILoginBoxEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "LoginBox";
                    this.mUILoginBoxEdit.WindowTitles.Add("LoginView");
                    #endregion
                }
                return this.mUILoginBoxEdit;
            }
        }
        
        public WpfEdit UIPasswordBoxEdit
        {
            get
            {
                if ((this.mUIPasswordBoxEdit == null))
                {
                    this.mUIPasswordBoxEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIPasswordBoxEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "PasswordBox";
                    this.mUIPasswordBoxEdit.WindowTitles.Add("LoginView");
                    #endregion
                }
                return this.mUIPasswordBoxEdit;
            }
        }
        
        public WpfButton UISigninButton
        {
            get
            {
                if ((this.mUISigninButton == null))
                {
                    this.mUISigninButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUISigninButton.SearchProperties[WpfButton.PropertyNames.Name] = "Sign in";
                    this.mUISigninButton.WindowTitles.Add("LoginView");
                    #endregion
                }
                return this.mUISigninButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mUILoginBoxEdit;
        
        private WpfEdit mUIPasswordBoxEdit;
        
        private WpfButton mUISigninButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIOKWindow : WinWindow
    {
        
        public UIOKWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "OK";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Button";
            this.WindowTitles.Add("OK");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("OK");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILoginViewWindow1 : WinWindow
    {
        
        public UILoginViewWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "LoginView";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("LoginView");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("LoginView");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDebugWindow : WinWindow
    {
        
        public UIDebugWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Debug";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "CabinetWClass";
            this.WindowTitles.Add("Debug");
            #endregion
        }
        
        #region Properties
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public WinTitleBar UIDebugTitleBar
        {
            get
            {
                if ((this.mUIDebugTitleBar == null))
                {
                    this.mUIDebugTitleBar = new WinTitleBar(this);
                    #region Search Criteria
                    this.mUIDebugTitleBar.WindowTitles.Add("Debug");
                    #endregion
                }
                return this.mUIDebugTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow mUIItemWindow;
        
        private WinTitleBar mUIDebugTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Debug");
            #endregion
        }
        
        #region Properties
        public UIDigital_docs_wpfListItem UIDigital_docs_wpfListItem
        {
            get
            {
                if ((this.mUIDigital_docs_wpfListItem == null))
                {
                    this.mUIDigital_docs_wpfListItem = new UIDigital_docs_wpfListItem(this);
                }
                return this.mUIDigital_docs_wpfListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIDigital_docs_wpfListItem mUIDigital_docs_wpfListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDigital_docs_wpfListItem : WinListItem
    {
        
        public UIDigital_docs_wpfListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "digital_docs_wpf";
            this.WindowTitles.Add("Debug");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Debug");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIUser1_NewTasksWindow : WpfWindow
    {
        
        public UIUser1_NewTasksWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "User1_NewTasks";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("User1_NewTasks");
            #endregion
        }
        
        #region Properties
        public WpfButton UIBacktologinButton
        {
            get
            {
                if ((this.mUIBacktologinButton == null))
                {
                    this.mUIBacktologinButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIBacktologinButton.SearchProperties[WpfButton.PropertyNames.Name] = "Back to login";
                    this.mUIBacktologinButton.WindowTitles.Add("User1_NewTasks");
                    #endregion
                }
                return this.mUIBacktologinButton;
            }
        }
        
        public WpfButton UIFetchoffersButton
        {
            get
            {
                if ((this.mUIFetchoffersButton == null))
                {
                    this.mUIFetchoffersButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIFetchoffersButton.SearchProperties[WpfButton.PropertyNames.Name] = "Fetch offers";
                    this.mUIFetchoffersButton.WindowTitles.Add("User1_NewTasks");
                    #endregion
                }
                return this.mUIFetchoffersButton;
            }
        }
        
        public UIListViewTable UIListViewTable
        {
            get
            {
                if ((this.mUIListViewTable == null))
                {
                    this.mUIListViewTable = new UIListViewTable(this);
                }
                return this.mUIListViewTable;
            }
        }
        
        public WpfCheckBox UIEmployee2CheckBox
        {
            get
            {
                if ((this.mUIEmployee2CheckBox == null))
                {
                    this.mUIEmployee2CheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mUIEmployee2CheckBox.SearchProperties[WpfCheckBox.PropertyNames.Name] = "Employee #2";
                    this.mUIEmployee2CheckBox.WindowTitles.Add("User1_NewTasks");
                    #endregion
                }
                return this.mUIEmployee2CheckBox;
            }
        }
        
        public WpfButton UIAcceptButton
        {
            get
            {
                if ((this.mUIAcceptButton == null))
                {
                    this.mUIAcceptButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIAcceptButton.SearchProperties[WpfButton.PropertyNames.Name] = "Accept";
                    this.mUIAcceptButton.WindowTitles.Add("User1_NewTasks");
                    #endregion
                }
                return this.mUIAcceptButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIBacktologinButton;
        
        private WpfButton mUIFetchoffersButton;
        
        private UIListViewTable mUIListViewTable;
        
        private WpfCheckBox mUIEmployee2CheckBox;
        
        private WpfButton mUIAcceptButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIListViewTable : WpfTable
    {
        
        public UIListViewTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "listView";
            this.WindowTitles.Add("User1_NewTasks");
            #endregion
        }
        
        #region Properties
        public UIItemDataItem UIItemDataItem
        {
            get
            {
                if ((this.mUIItemDataItem == null))
                {
                    this.mUIItemDataItem = new UIItemDataItem(this);
                }
                return this.mUIItemDataItem;
            }
        }
        #endregion
        
        #region Fields
        private UIItemDataItem mUIItemDataItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemDataItem : WpfControl
    {
        
        public UIItemDataItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ControlType] = "DataItem";
            this.WindowTitles.Add("User1_NewTasks");
            #endregion
        }
        
        #region Properties
        public WpfCell UIMailSubject8832Cell
        {
            get
            {
                if ((this.mUIMailSubject8832Cell == null))
                {
                    this.mUIMailSubject8832Cell = new WpfCell(this);
                    #region Search Criteria
                    this.mUIMailSubject8832Cell.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Title";
                    this.mUIMailSubject8832Cell.WindowTitles.Add("User1_NewTasks");
                    #endregion
                }
                return this.mUIMailSubject8832Cell;
            }
        }
        #endregion
        
        #region Fields
        private WpfCell mUIMailSubject8832Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIUser234_InProgressWindow : WpfWindow
    {
        
        public UIUser234_InProgressWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "User234_InProgress";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("User234_InProgress");
            #endregion
        }
        
        #region Properties
        public WpfButton UIFetchoffersButton
        {
            get
            {
                if ((this.mUIFetchoffersButton == null))
                {
                    this.mUIFetchoffersButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIFetchoffersButton.SearchProperties[WpfButton.PropertyNames.Name] = "Fetch offers";
                    this.mUIFetchoffersButton.WindowTitles.Add("User234_InProgress");
                    #endregion
                }
                return this.mUIFetchoffersButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIFetchoffersButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIUser234_InProgressWindow1 : WinWindow
    {
        
        public UIUser234_InProgressWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "User234_InProgress";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("User234_InProgress");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("User234_InProgress");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIUser1_NewTasksWindow1 : WinWindow
    {
        
        public UIUser1_NewTasksWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "User1_NewTasks";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("User1_NewTasks");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("User1_NewTasks");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIExcelDialogWindow : WpfWindow
    {
        
        public UIExcelDialogWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Excel Dialog";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Excel Dialog");
            #endregion
        }
        
        #region Properties
        public WpfEdit UIProductListTextBoxEdit
        {
            get
            {
                if ((this.mUIProductListTextBoxEdit == null))
                {
                    this.mUIProductListTextBoxEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIProductListTextBoxEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "productListTextBox";
                    this.mUIProductListTextBoxEdit.WindowTitles.Add("Excel Dialog");
                    #endregion
                }
                return this.mUIProductListTextBoxEdit;
            }
        }
        
        public WpfButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "okButton";
                    this.mUIOKButton.WindowTitles.Add("Excel Dialog");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mUIProductListTextBoxEdit;
        
        private WpfButton mUIOKButton;
        #endregion
    }
}
