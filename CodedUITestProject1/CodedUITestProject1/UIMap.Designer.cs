// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 15.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace CodedUITestProject1
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// kek hue
        /// </summary>
        public void RecordedMethod1()
        {
            #region Variable Declarations
            WinEdit uINameEdit = this.UIDebugWindow.UIItemWindow.UIDigital_docs_wpfListItem.UINameEdit;
            WpfButton uIEmployee2Button = this.UIMainWindowWindow.UIEmployee2Button;
            WpfButton uIEmployee1Button = this.UIMainWindowWindow.UIEmployee1Button;
            WpfButton uIAcceptButton = this.UIEmployee1_xamlWindow.UIAcceptButton;
            #endregion

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit, new Point(61, 24));

            // Click 'Employee 2' button
            Mouse.Click(uIEmployee2Button, new Point(47, 22));

            // Click 'Employee 1' button
            Mouse.Click(uIEmployee1Button, new Point(86, 36));

            // Click 'Accept' button
            Mouse.Click(uIAcceptButton, new Point(83, 18));
        }
        
        /// <summary>
        /// RecordedMethod2 - Use 'RecordedMethod2Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod2()
        {
            #region Variable Declarations
            WinEdit uINameEdit = this.UIDebugWindow.UIItemWindow.UIBinListItem.UINameEdit;
            WinEdit uINameEdit1 = this.UIDebugWindow.UIItemWindow1.UIDebugListItem.UINameEdit;
            WinEdit uINameEdit2 = this.UIDebugWindow.UIItemWindow2.UIDigital_docs_wpfListItem.UINameEdit;
            WpfEdit uIItemEdit = this.UIMainWindowWindow.UIItemEdit;
            WpfEdit uIItemEdit1 = this.UIMainWindowWindow.UIItemEdit1;
            WpfButton uISigninButton = this.UIMainWindowWindow.UISigninButton;
            WpfList uIOffersListViewList = this.UIEmployee1_xamlWindow.UIOffersListViewList;
            WpfButton uIShowofferButton = this.UIEmployee1_xamlWindow.UIShowofferButton;
            WpfButton uIAcceptButton = this.UIEmployee1_xamlWindow.UIAcceptButton;
            WpfList uIItemList = this.UIAssignEmployeeWindowWindow.UIItemList;
            WpfButton uIAcceptButton1 = this.UIAssignEmployeeWindowWindow.UIAcceptButton;
            WinButton uICloseButton = this.UIAssignEmployeeWindowWindow1.UICloseButton;
            WinButton uICloseButton1 = this.UIDebugWindow.UIDebugTitleBar.UICloseButton;
            #endregion

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit, new Point(32, 8));

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit1, new Point(42, 19));

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit2, new Point(68, 19));

            // Type 'User1' in text box
            uIItemEdit.Text = this.RecordedMethod2Params.UIItemEditText;

            // Type '{Tab}' in text box
            Keyboard.SendKeys(uIItemEdit, this.RecordedMethod2Params.UIItemEditSendKeys, ModifierKeys.None);

            // Type '********' in text box numbered 2 in 'MainWindow' window
            Keyboard.SendKeys(uIItemEdit1, this.RecordedMethod2Params.UIItemEdit1SendKeys, true);

            // Click 'Sign in' button
            Mouse.Click(uISigninButton, new Point(41, 17));

            // Select 'Sample mail 4' in 'OffersListView' list box
            uIOffersListViewList.SelectedItemsAsString = this.RecordedMethod2Params.UIOffersListViewListSelectedItemsAsString;

            // Click 'Show offer' button
            Mouse.Click(uIShowofferButton, new Point(66, 33));

            // Click 'Accept' button
            Mouse.Click(uIAcceptButton, new Point(80, 22));

            // Select 'Employee 4' in list box
            uIItemList.SelectedItemsAsString = this.RecordedMethod2Params.UIItemListSelectedItemsAsString;

            // Click 'Accept' button
            Mouse.Click(uIAcceptButton1, new Point(64, 33));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(31, 28));

            // Click 'Close' button
            Mouse.Click(uICloseButton1, new Point(52, 14));
        }
        
        /// <summary>
        /// RecordedMethod3 - Use 'RecordedMethod3Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod3()
        {
            #region Variable Declarations
            WinEdit uINameEdit = this.UIDebugWindow.UIItemWindow.UIDigital_docs_wpfListItem.UINameEdit;
            WpfEdit uIItemEdit = this.UIMainWindowWindow.UIItemEdit;
            WpfEdit uIItemEdit1 = this.UIMainWindowWindow.UIItemEdit1;
            WpfButton uISigninButton = this.UIMainWindowWindow.UISigninButton;
            WpfList uIOffersListViewList = this.UIEmployee1_xamlWindow.UIOffersListViewList;
            WpfButton uIAcceptButton = this.UIEmployee1_xamlWindow.UIAcceptButton;
            WpfList uIItemList = this.UIAssignEmployeeWindowWindow.UIItemList;
            WpfButton uIAcceptButton1 = this.UIAssignEmployeeWindowWindow.UIAcceptButton;
            WinButton uICloseButton = this.UIAssignEmployeeWindowWindow1.UICloseButton;
            #endregion

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit, new Point(90, 6));

            // Type 'User1' in text box
            uIItemEdit.Text = this.RecordedMethod3Params.UIItemEditText;

            // Type '{Tab}' in text box
            Keyboard.SendKeys(uIItemEdit, this.RecordedMethod3Params.UIItemEditSendKeys, ModifierKeys.None);

            // Type '********' in text box numbered 2 in 'MainWindow' window
            Keyboard.SendKeys(uIItemEdit1, this.RecordedMethod3Params.UIItemEdit1SendKeys, true);

            // Click 'Sign in' button
            Mouse.Click(uISigninButton, new Point(54, 22));

            // Select 'Sample mail 5' in 'OffersListView' list box
            uIOffersListViewList.SelectedItemsAsString = this.RecordedMethod3Params.UIOffersListViewListSelectedItemsAsString;

            // Click 'Accept' button
            Mouse.Click(uIAcceptButton, new Point(83, 29));

            // Select 'Employee 4' in list box
            uIItemList.SelectedItemsAsString = this.RecordedMethod3Params.UIItemListSelectedItemsAsString;

            // Click 'Accept' button
            Mouse.Click(uIAcceptButton1, new Point(82, 22));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(28, 21));
        }
        
        #region Properties
        public virtual RecordedMethod2Params RecordedMethod2Params
        {
            get
            {
                if ((this.mRecordedMethod2Params == null))
                {
                    this.mRecordedMethod2Params = new RecordedMethod2Params();
                }
                return this.mRecordedMethod2Params;
            }
        }
        
        public virtual RecordedMethod3Params RecordedMethod3Params
        {
            get
            {
                if ((this.mRecordedMethod3Params == null))
                {
                    this.mRecordedMethod3Params = new RecordedMethod3Params();
                }
                return this.mRecordedMethod3Params;
            }
        }
        
        public UIDebugWindow UIDebugWindow
        {
            get
            {
                if ((this.mUIDebugWindow == null))
                {
                    this.mUIDebugWindow = new UIDebugWindow();
                }
                return this.mUIDebugWindow;
            }
        }
        
        public UIMainWindowWindow UIMainWindowWindow
        {
            get
            {
                if ((this.mUIMainWindowWindow == null))
                {
                    this.mUIMainWindowWindow = new UIMainWindowWindow();
                }
                return this.mUIMainWindowWindow;
            }
        }
        
        public UIEmployee1_xamlWindow UIEmployee1_xamlWindow
        {
            get
            {
                if ((this.mUIEmployee1_xamlWindow == null))
                {
                    this.mUIEmployee1_xamlWindow = new UIEmployee1_xamlWindow();
                }
                return this.mUIEmployee1_xamlWindow;
            }
        }
        
        public UIAssignEmployeeWindowWindow UIAssignEmployeeWindowWindow
        {
            get
            {
                if ((this.mUIAssignEmployeeWindowWindow == null))
                {
                    this.mUIAssignEmployeeWindowWindow = new UIAssignEmployeeWindowWindow();
                }
                return this.mUIAssignEmployeeWindowWindow;
            }
        }
        
        public UIAssignEmployeeWindowWindow1 UIAssignEmployeeWindowWindow1
        {
            get
            {
                if ((this.mUIAssignEmployeeWindowWindow1 == null))
                {
                    this.mUIAssignEmployeeWindowWindow1 = new UIAssignEmployeeWindowWindow1();
                }
                return this.mUIAssignEmployeeWindowWindow1;
            }
        }
        #endregion
        
        #region Fields
        private RecordedMethod2Params mRecordedMethod2Params;
        
        private RecordedMethod3Params mRecordedMethod3Params;
        
        private UIDebugWindow mUIDebugWindow;
        
        private UIMainWindowWindow mUIMainWindowWindow;
        
        private UIEmployee1_xamlWindow mUIEmployee1_xamlWindow;
        
        private UIAssignEmployeeWindowWindow mUIAssignEmployeeWindowWindow;
        
        private UIAssignEmployeeWindowWindow1 mUIAssignEmployeeWindowWindow1;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class RecordedMethod2Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'User1' in text box
        /// </summary>
        public string UIItemEditText = "User1";
        
        /// <summary>
        /// Type '{Tab}' in text box
        /// </summary>
        public string UIItemEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '********' in text box numbered 2 in 'MainWindow' window
        /// </summary>
        public string UIItemEdit1SendKeys = "T2cR1h5GaUMN8FI2K66q5bOKPlzCQyFz";
        
        /// <summary>
        /// Select 'Sample mail 4' in 'OffersListView' list box
        /// </summary>
        public string UIOffersListViewListSelectedItemsAsString = "Sample mail 4";
        
        /// <summary>
        /// Select 'Employee 4' in list box
        /// </summary>
        public string UIItemListSelectedItemsAsString = "Employee 4";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod3'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class RecordedMethod3Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'User1' in text box
        /// </summary>
        public string UIItemEditText = "User1";
        
        /// <summary>
        /// Type '{Tab}' in text box
        /// </summary>
        public string UIItemEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '********' in text box numbered 2 in 'MainWindow' window
        /// </summary>
        public string UIItemEdit1SendKeys = "T2cR1h5GaUMN8FI2K66q5bOKPlzCQyFz";
        
        /// <summary>
        /// Select 'Sample mail 5' in 'OffersListView' list box
        /// </summary>
        public string UIOffersListViewListSelectedItemsAsString = "Sample mail 5";
        
        /// <summary>
        /// Select 'Employee 4' in list box
        /// </summary>
        public string UIItemListSelectedItemsAsString = "Employee 4";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDebugWindow : WinWindow
    {
        
        public UIDebugWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Debug";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "CabinetWClass";
            this.WindowTitles.Add("Debug");
            this.WindowTitles.Add("digital-docs-wpf");
            this.WindowTitles.Add("bin");
            #endregion
        }
        
        #region Properties
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItemWindow1 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow1(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIItemWindow2 UIItemWindow2
        {
            get
            {
                if ((this.mUIItemWindow2 == null))
                {
                    this.mUIItemWindow2 = new UIItemWindow2(this);
                }
                return this.mUIItemWindow2;
            }
        }
        
        public UIDebugTitleBar UIDebugTitleBar
        {
            get
            {
                if ((this.mUIDebugTitleBar == null))
                {
                    this.mUIDebugTitleBar = new UIDebugTitleBar(this);
                }
                return this.mUIDebugTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow mUIItemWindow;
        
        private UIItemWindow1 mUIItemWindow1;
        
        private UIItemWindow2 mUIItemWindow2;
        
        private UIDebugTitleBar mUIDebugTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Debug");
            this.WindowTitles.Add("digital-docs-wpf");
            #endregion
        }
        
        #region Properties
        public UIDigital_docs_wpfListItem UIDigital_docs_wpfListItem
        {
            get
            {
                if ((this.mUIDigital_docs_wpfListItem == null))
                {
                    this.mUIDigital_docs_wpfListItem = new UIDigital_docs_wpfListItem(this);
                }
                return this.mUIDigital_docs_wpfListItem;
            }
        }
        
        public UIBinListItem UIBinListItem
        {
            get
            {
                if ((this.mUIBinListItem == null))
                {
                    this.mUIBinListItem = new UIBinListItem(this);
                }
                return this.mUIBinListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIDigital_docs_wpfListItem mUIDigital_docs_wpfListItem;
        
        private UIBinListItem mUIBinListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDigital_docs_wpfListItem : WinListItem
    {
        
        public UIDigital_docs_wpfListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "digital_docs_wpf";
            this.WindowTitles.Add("Debug");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Debug");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIBinListItem : WinListItem
    {
        
        public UIBinListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "bin";
            this.WindowTitles.Add("digital-docs-wpf");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("digital-docs-wpf");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("bin");
            #endregion
        }
        
        #region Properties
        public UIDebugListItem UIDebugListItem
        {
            get
            {
                if ((this.mUIDebugListItem == null))
                {
                    this.mUIDebugListItem = new UIDebugListItem(this);
                }
                return this.mUIDebugListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIDebugListItem mUIDebugListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDebugListItem : WinListItem
    {
        
        public UIDebugListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "Debug";
            this.WindowTitles.Add("bin");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("bin");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Debug");
            #endregion
        }
        
        #region Properties
        public UIDigital_docs_wpfListItem1 UIDigital_docs_wpfListItem
        {
            get
            {
                if ((this.mUIDigital_docs_wpfListItem == null))
                {
                    this.mUIDigital_docs_wpfListItem = new UIDigital_docs_wpfListItem1(this);
                }
                return this.mUIDigital_docs_wpfListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIDigital_docs_wpfListItem1 mUIDigital_docs_wpfListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDigital_docs_wpfListItem1 : WinListItem
    {
        
        public UIDigital_docs_wpfListItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "digital_docs_wpf";
            this.WindowTitles.Add("Debug");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Debug");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDebugTitleBar : WinTitleBar
    {
        
        public UIDebugTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Debug");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Debug");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIMainWindowWindow : WpfWindow
    {
        
        public UIMainWindowWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "MainWindow";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public WpfButton UIEmployee2Button
        {
            get
            {
                if ((this.mUIEmployee2Button == null))
                {
                    this.mUIEmployee2Button = new WpfButton(this);
                    #region Search Criteria
                    this.mUIEmployee2Button.SearchProperties[WpfButton.PropertyNames.Name] = "Employee 2";
                    this.mUIEmployee2Button.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIEmployee2Button;
            }
        }
        
        public WpfButton UIEmployee1Button
        {
            get
            {
                if ((this.mUIEmployee1Button == null))
                {
                    this.mUIEmployee1Button = new WpfButton(this);
                    #region Search Criteria
                    this.mUIEmployee1Button.SearchProperties[WpfButton.PropertyNames.Name] = "Employee 1";
                    this.mUIEmployee1Button.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIEmployee1Button;
            }
        }
        
        public WpfEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        
        public WpfEdit UIItemEdit1
        {
            get
            {
                if ((this.mUIItemEdit1 == null))
                {
                    this.mUIItemEdit1 = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit1.SearchProperties[WpfEdit.PropertyNames.Instance] = "2";
                    this.mUIItemEdit1.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIItemEdit1;
            }
        }
        
        public WpfButton UISigninButton
        {
            get
            {
                if ((this.mUISigninButton == null))
                {
                    this.mUISigninButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUISigninButton.SearchProperties[WpfButton.PropertyNames.Name] = "Sign in";
                    this.mUISigninButton.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUISigninButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIEmployee2Button;
        
        private WpfButton mUIEmployee1Button;
        
        private WpfEdit mUIItemEdit;
        
        private WpfEdit mUIItemEdit1;
        
        private WpfButton mUISigninButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIEmployee1_xamlWindow : WpfWindow
    {
        
        public UIEmployee1_xamlWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Employee1_xaml";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Employee1_xaml");
            #endregion
        }
        
        #region Properties
        public WpfButton UIAcceptButton
        {
            get
            {
                if ((this.mUIAcceptButton == null))
                {
                    this.mUIAcceptButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIAcceptButton.SearchProperties[WpfButton.PropertyNames.Name] = "Accept";
                    this.mUIAcceptButton.WindowTitles.Add("Employee1_xaml");
                    #endregion
                }
                return this.mUIAcceptButton;
            }
        }
        
        public WpfList UIOffersListViewList
        {
            get
            {
                if ((this.mUIOffersListViewList == null))
                {
                    this.mUIOffersListViewList = new WpfList(this);
                    #region Search Criteria
                    this.mUIOffersListViewList.SearchProperties[WpfList.PropertyNames.AutomationId] = "OffersListView";
                    this.mUIOffersListViewList.WindowTitles.Add("Employee1_xaml");
                    #endregion
                }
                return this.mUIOffersListViewList;
            }
        }
        
        public WpfButton UIShowofferButton
        {
            get
            {
                if ((this.mUIShowofferButton == null))
                {
                    this.mUIShowofferButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIShowofferButton.SearchProperties[WpfButton.PropertyNames.Name] = "Show offer";
                    this.mUIShowofferButton.WindowTitles.Add("Employee1_xaml");
                    #endregion
                }
                return this.mUIShowofferButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIAcceptButton;
        
        private WpfList mUIOffersListViewList;
        
        private WpfButton mUIShowofferButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIAssignEmployeeWindowWindow : WpfWindow
    {
        
        public UIAssignEmployeeWindowWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "AssignEmployeeWindow";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("AssignEmployeeWindow");
            #endregion
        }
        
        #region Properties
        public WpfList UIItemList
        {
            get
            {
                if ((this.mUIItemList == null))
                {
                    this.mUIItemList = new WpfList(this);
                    #region Search Criteria
                    this.mUIItemList.WindowTitles.Add("AssignEmployeeWindow");
                    #endregion
                }
                return this.mUIItemList;
            }
        }
        
        public WpfButton UIAcceptButton
        {
            get
            {
                if ((this.mUIAcceptButton == null))
                {
                    this.mUIAcceptButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIAcceptButton.SearchProperties[WpfButton.PropertyNames.Name] = "Accept";
                    this.mUIAcceptButton.WindowTitles.Add("AssignEmployeeWindow");
                    #endregion
                }
                return this.mUIAcceptButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfList mUIItemList;
        
        private WpfButton mUIAcceptButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIAssignEmployeeWindowWindow1 : WinWindow
    {
        
        public UIAssignEmployeeWindowWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "AssignEmployeeWindow";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("AssignEmployeeWindow");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("AssignEmployeeWindow");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
}
